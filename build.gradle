plugins {
    id 'java'
    id 'idea'
    id 'application'
}

group 'org.test'
version '1.0'

repositories {
    mavenCentral()
}

application {
    mainClass = "init.CoffeeMachineRunner"
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.16"
    annotationProcessor "org.projectlombok:lombok:1.18.8"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.8"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.8"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.8"
    testCompile "junit:junit:4.13"
    testCompile "org.hamcrest:java-hamcrest:2.0.0.0"
    testImplementation "org.mockito:mockito-core:2.2.20"
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
                TestLogEvent.STARTED

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    reports.html.destination = file("$buildDir/html")
}